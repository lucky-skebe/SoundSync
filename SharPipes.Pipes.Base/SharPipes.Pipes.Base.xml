<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharPipes.Pipes.Base</name>
    </assembly>
    <members>
        <member name="T:SharPipes.Pipes.Base.Attributes.ElementNameAttribute">
            <summary>
            USed to set the name an element can be retrieved by useing <see cref="M:SharPipes.Pipes.Base.PipeElementFactory.Make(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.Attributes.ElementNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.Attributes.ElementNameAttribute"/> class.
            </summary>
            <param name="name">The name to register under.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.Attributes.ElementNameAttribute.Name">
            <summary>
            Gets the name to register under.
            </summary>
            <value>
            The name to register under.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.Events.ElementAddedEventArgs">
            <summary>
            Provides data for the <see cref="E:SharPipes.Pipes.Base.PipeLine.ElementAdded" /> event.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.Events.ElementAddedEventArgs.#ctor(SharPipes.Pipes.Base.IPipeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.Events.ElementAddedEventArgs"/> class.
            </summary>
            <param name="element">The added element.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.Events.ElementAddedEventArgs.Element">
            <summary>
            Gets wich element was added.
            </summary>
            <value>
            the added element.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.Events.ElementRemovedEventArgs">
            <summary>
            Provides data for the <see cref="E:SharPipes.Pipes.Base.PipeLine.ElementRemoved" /> event.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.Events.ElementRemovedEventArgs.#ctor(SharPipes.Pipes.Base.IPipeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.Events.ElementRemovedEventArgs"/> class.
            </summary>
            <param name="element">The removed element.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.Events.ElementRemovedEventArgs.Element">
            <summary>
            Gets wich element was removed.
            </summary>
            <value>
            the removed element.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.Events.ElementsLinkedEventArgs">
            <summary>
            Provides data for the <see cref="E:SharPipes.Pipes.Base.PipeLine.ElementsLinked" /> event.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.Events.ElementsLinkedEventArgs.#ctor(SharPipes.Pipes.Base.IPipeSrcPad,SharPipes.Pipes.Base.IPipeSinkPad)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.Events.ElementsLinkedEventArgs"/> class.
            </summary>
            <param name="src">The src pad that was linked.</param>
            <param name="sink">The sink pad that was linked.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.Events.ElementsLinkedEventArgs.Src">
            <summary>
            Gets the linked src pad.
            </summary>
            <value>
            The linked src pad.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.Events.ElementsLinkedEventArgs.Sink">
            <summary>
            Gets the linked sink pad.
            </summary>
            <value>
            The linked sink pad.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.Events.ElementsUnlinkedEventArgs">
            <summary>
            Provides data for the <see cref="E:SharPipes.Pipes.Base.PipeLine.ElementsUnlinked" /> event.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.Events.ElementsUnlinkedEventArgs.#ctor(SharPipes.Pipes.Base.IPipeSrcPad,SharPipes.Pipes.Base.IPipeSinkPad)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.Events.ElementsUnlinkedEventArgs"/> class.
            </summary>
            <param name="src">The src pad that was unlinked.</param>
            <param name="sink">The sink pad that was unlinked.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.Events.ElementsUnlinkedEventArgs.Src">
            <summary>
            Gets the unlinked src pad.
            </summary>
            <value>
            The unlinked src pad.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.Events.ElementsUnlinkedEventArgs.Sink">
            <summary>
            Gets the unlinked sink pad.
            </summary>
            <value>
            The unlinked sink pad.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.GraphState">
             <summary>
             The state teh pipelines Graph is in.
            
             If the graph is either incomplete or containes cycles.
             </summary>
        </member>
        <member name="F:SharPipes.Pipes.Base.GraphState.OK">
            <summary>
            The Graph is fully linked and non cyclical
            </summary>
        </member>
        <member name="F:SharPipes.Pipes.Base.GraphState.INCOMPLETE">
            <summary>
            The Graph is not completely linked
            </summary>
        </member>
        <member name="F:SharPipes.Pipes.Base.GraphState.CYCLE">
            <summary>
            The graph contains a cycle that needs to be resolved
            </summary>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.BoolParameterInteraction">
            <summary>
            Describes the Interaction with an Elements Property of type <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.BoolParameterInteraction.#ctor(System.String,System.Func{System.Boolean},System.Action{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.BoolParameterInteraction"/> class.
            </summary>
            <param name="name">The name of the Interaction.</param>
            <param name="getValue">The method get get the propertys value.</param>
            <param name="setValue">The method get set the propertys value.</param>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction">
            <summary>
            An interaction that works similar to a WPF <see cref="T:System.Windows.Input.ICommand"/>.
            This can be used for buttons.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction.#ctor(System.String,System.Action,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction"/> class.
            </summary>
            <param name="name">The name of the command. Used for labeing Buttons...</param>
            <param name="action">the ction that should happen when the button is pressed.</param>
            <param name="canExecute">True is the command can be executed immideatly otherwise False.</param>
        </member>
        <member name="E:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction.CanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction.Name">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction.SetCanExecute(System.Boolean)">
            <summary>
            Sets whenever the command can currently be executed.
            </summary>
            <param name="canExecute">If the command can be executed.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.CommandInteraction.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.DoubleParameterInteraction">
            <summary>
            Describes the Interaction with an Elements Property of type <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.DoubleParameterInteraction.#ctor(System.String,System.Func{System.Double},System.Action{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.DoubleParameterInteraction"/> class.
            </summary>
            <param name="name">The name of the Interaction.</param>
            <param name="getValue">The method get get the propertys value.</param>
            <param name="setValue">The method get set the propertys value.</param>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.IInteraction">
            <summary>
            Defines an Interaction with an Element.
            Examples:
            Properties
            Connecting to a Server.
            ...
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.IInteraction.Name">
            <summary>
            Gets the name of the Interaction.
            This name could be used to Label a button for Example.
            </summary>
            <value>
            The name of the Interaction.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.IntParameterInteraction">
            <summary>
            Describes the Interaction with an Elements Property of type <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.IntParameterInteraction.#ctor(System.String,System.Func{System.Int32},System.Action{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.IntParameterInteraction"/> class.
            </summary>
            <param name="name">The name of the Interaction.</param>
            <param name="getValue">The method get get the propertys value.</param>
            <param name="setValue">The method get set the propertys value.</param>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.ISelectable`1">
            <summary>
            Describes an Entry in a <see cref="T:SharPipes.Pipes.Base.InteractionInfos.MultiSelectionInteraction`2"/>.
            It Contains a Value and information if that value is Selected.
            </summary>
            <typeparam name="T">The of the underlying Value.</typeparam>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.ISelectable`1.Selected">
            <summary>
            Gets or sets a value indicating whether the Option is selected.
            </summary>
            <value>
            A value indicating whether the Option is selected.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.ISelectable`1.Value">
            <summary>
            Gets the underlying Value.
            </summary>
            <value>
            The underlying Value.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.MultiSelectionInteraction`2">
            <summary>
            An interaction that contains multiple selectable items.
            Usually shown in a listbox wich a checkbox for each item.
            </summary>
            <typeparam name="TSelect">type of the selectable.</typeparam>
            <typeparam name="TValue">type of the selecables inner element.</typeparam>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.MultiSelectionInteraction`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.MultiSelectionInteraction`2"/> class.
            </summary>
            <param name="name">the name of the interaction.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.MultiSelectionInteraction`2.Options">
            <summary>
            Gets a list of <see cref="T:SharPipes.Pipes.Base.InteractionInfos.ISelectable`1"/> items.
            </summary>
            <value>
            A list of <see cref="T:SharPipes.Pipes.Base.InteractionInfos.ISelectable`1"/> items.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.MultiSelectionInteraction`2.Name">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.Selectable`1">
            <summary>
            Describes an Entry in a <see cref="T:SharPipes.Pipes.Base.InteractionInfos.MultiSelectionInteraction`2"/>.
            It Contains a Value and information if that value is Selected.
            </summary>
            <typeparam name="T">The of the underlying Value.</typeparam>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.Selectable`1.#ctor(`0,System.Action{SharPipes.Pipes.Base.InteractionInfos.Selectable{`0},System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.Selectable`1"/> class.
            </summary>
            <param name="value">The underlying Value.</param>
            <param name="setSelectedCallback">A callback that is called each time the IsSelected Property Changes.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.Selectable`1.#ctor(`0,System.Boolean,System.Action{SharPipes.Pipes.Base.InteractionInfos.Selectable{`0},System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.Selectable`1"/> class.
            </summary>
            <param name="value">The underlying Value.</param>
            <param name="selected">the initial selection state.</param>
            <param name="setSelectedCallback">A callback that is called each time the IsSelected Property Changes.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.Selectable`1.Selected">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.Selectable`1.Value">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.StringParameterInteraction">
            <summary>
            Describes the Interaction with an Elements Property of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.StringParameterInteraction.#ctor(System.String,System.Func{System.String},System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.StringParameterInteraction"/> class.
            </summary>
            <param name="name">The name of the Interaction.</param>
            <param name="getValue">The method get get the propertys value.</param>
            <param name="setValue">The method get set the propertys value.</param>
        </member>
        <member name="T:SharPipes.Pipes.Base.InteractionInfos.ValuePropertyInteraction`1">
            <summary>
            Describes the Interaction with an Elements Property.
            </summary>
            <typeparam name="TValue">The Type of the underlying Property.</typeparam>
        </member>
        <member name="M:SharPipes.Pipes.Base.InteractionInfos.ValuePropertyInteraction`1.#ctor(System.String,System.Func{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.InteractionInfos.ValuePropertyInteraction`1"/> class.
            </summary>
            <param name="name">The name of the Interaction.</param>
            <param name="getValue">The method get get the propertys value.</param>
            <param name="setValue">The method get set the propertys value.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.ValuePropertyInteraction`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.InteractionInfos.ValuePropertyInteraction`1.Value">
            <summary>
            Gets or sets the Value of the Elements Property.
            </summary>
            <value>
            The Value of the Elements Property.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPipeElement">
            <summary>
            Defines what members all elements need to implement.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeElement.Name">
            <summary>
            Gets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeElement.CurrentState">
            <summary>
            Gets the current state of the element.
            </summary>
            <value>
            The current state of the element.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeElement.TypeName">
            <summary>
            Gets the name of this kind of element.
            </summary>
            <value>
            The name of this kind of element.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeElement.Interactions">
            <summary>
            Gets the interactions this element supports.
            </summary>
            <value>
            The interactions this element supports.
            </value>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.GoToState(SharPipes.Pipes.Base.State)">
            <summary>
            Tells the element to change to a specific State.
            Changed to all the inbetween states as well.
            </summary>
            <param name="newState">The State to change to.</param>
            <returns>A task that represents the state change operation.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.Check">
            <summary>
            Checks if the element can be started.
            </summary>
            <returns>The connectionstate of the element.
            <see cref="F:SharPipes.Pipes.Base.GraphState.OK"/> if all necessary pads are linked.
            <see cref="F:SharPipes.Pipes.Base.GraphState.INCOMPLETE"/> otherwise.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.GetPrevNodes">
            <summary>
            Gets all the elements feeding into this one.
            </summary>
            <returns>All the elements feeding data into this one.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.GetSinkPads">
            <summary>
            Returns all sink pads of the element.
            </summary>
            <returns>All sink pads.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.GetSrcPads">
            <summary>
            Returns all src pads of the element.
            </summary>
            <returns>All src pads.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.GetPropertyValues">
            <summary>
            Gets all property values that should be serialized.
            </summary>
            <returns>All property values to serialize.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.SetPropertyValue(SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue)">
            <summary>
            Sets a property based on a <see cref="T:SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue"/>.
            </summary>
            <param name="propertyValze">The property value providing the value.</param>
            <returns>True if the value was able to be set. False otherwise.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.GetSrcPad(System.String)">
            <summary>
            Retrieves a Src pad with a given name.
            </summary>
            <param name="name">The name of the pad to retrieve.</param>
            <returns>The src with the given name or null if either the name wasn't found.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeElement.GetSinkPad(System.String)">
            <summary>
            Retrieves a Sink pad with a given name.
            </summary>
            <param name="name">The name of the pad to retrieve.</param>
            <returns>The sink with the given name or null if either the name wasn't found.</returns>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPipeLink">
            <summary>
            Describes the link between two pads.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeLink.Src">
            <summary>
            Gets the srs side pad of the link.
            </summary>
            <value>
            The srs side pad of the link.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeLink.Sink">
            <summary>
            Gets the sink side pad of the link.
            </summary>
            <value>
            The sink side pad of the link.
            </value>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeLink.Unlink">
            <summary>
            Unlinks the elements connected by this link.
            </summary>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPipeSink">
            <summary>
            Describes the basic interface of all elements that are a pure output.
            For custom sink elements you should usually use the <see cref="T:SharPipes.Pipes.Base.PipeSink"/> class.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeSink.GetSinkPad``1(System.String)">
            <summary>
            Retrieves a Sink pad with a given name.
            </summary>
            <typeparam name="TValue">Type of the <see cref="T:SharPipes.Pipes.Base.PipeSinkPad`1"/>.</typeparam>
            <param name="name">The name of the pad to retrieve.</param>
            <returns>The sink with the given name or null if either the name wasn't found or the type of the pad didn't match.</returns>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPipeSinkPad">
            <summary>
            Describes the minimum requirements for a SinkPad.
            most of the time <see cref="T:SharPipes.Pipes.Base.PipeSinkPad`1"/> should be used.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeSinkPad.Parent">
            <summary>
            Gets the element this pad is a part of.
            </summary>
            <value>
            The element this pad is a part of.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeSinkPad.Name">
            <summary>
            Gets the Name of the pad. Usually in the format of [ElementName]-[PadName]
            Examlple:
            Multiply-00000000-0000-0000-0000-000000000000-Sink.
            </summary>
            <value>
            The Name of the pad.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeSinkPad.Peer">
            <summary>
            Gets the pad on the other side of the link of null if the pad is not linked.
            </summary>
            <value>
            The pad on the other side of the link of null if the pad is not linked.
            </value>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeSinkPad.IsLinked">
            <summary>
            Returns the linking status of the pad.
            </summary>
            <returns>true if the pad is linked, false otherwise.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeSinkPad.Unlink">
            <summary>
            Unliks the pad from it's peer pad.
            </summary>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPipeSrc">
            <summary>
            Describes the basic interface of all elements that are a pure input.
            For custom sink elements you should usually use the <see cref="T:SharPipes.Pipes.Base.PipeSrc"/> class.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeSrc.GetSrcPad``1(System.String)">
            <summary>
            Retrieves a Src pad with a given name.
            </summary>
            <typeparam name="TValue">Type of the <see cref="T:SharPipes.Pipes.Base.PipeSrcPad`1"/>.</typeparam>
            <param name="name">The name of the pad to retrieve.</param>
            <returns>The src with the given name or null if either the name wasn't found or the type of the pad didn't match.</returns>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPipeSrcPad">
            <summary>
            Describes the minimum requirements for a SrcPad.
            most of the time <see cref="T:SharPipes.Pipes.Base.PipeSrcPad`1"/> should be used.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeSrcPad.Parent">
            <summary>
            Gets the element this pad is a part of.
            </summary>
            <value>
            The element this pad is a part of.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeSrcPad.Name">
            <summary>
            Gets the Name of the pad. Usually in the format of [ElementName]-[PadName]
            Examlple:
            Multiply-00000000-0000-0000-0000-000000000000-Sink.
            </summary>
            <value>
            The Name of the pad.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.IPipeSrcPad.Peer">
            <summary>
            Gets the pad on the other side of the link of null if the pad is not linked.
            </summary>
            <value>
            The pad on the other side of the link of null if the pad is not linked.
            </value>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeSrcPad.IsLinked">
            <summary>
            Returns the linking status of the pad.
            </summary>
            <returns>true if the pad is linked, false otherwise.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPipeSrcPad.Unlink">
            <summary>
            Unliks the pad from it's peer pad.
            </summary>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPipeTransform">
            <summary>
            Defines what members element with both src and sink pads should implement.
            </summary>
        </member>
        <member name="T:SharPipes.Pipes.Base.IPropertyBinding">
            <summary>
            Describes the methods all PropertyBinding should implement.
            Ususally <see cref="T:SharPipes.Pipes.Base.PropertyBinding`1"/> shoule be used when writing custom bindings.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPropertyBinding.TrySetValue(SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue)">
            <summary>
            Tries to set the value of a specified property.
            </summary>
            <param name="propvalue">the name and value of the property to set.</param>
            <returns>True if the property was set. False otherwise.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.IPropertyBinding.GetValue">
            <summary>
            Gets the name and value of a property.
            </summary>
            <returns>The name and value of a property.</returns>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeElement">
            <summary>
            Baseclass for all element.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeElement"/> class.
            </summary>
            <param name="name">the name ot the element.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeElement.Name">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeElement.CurrentState">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeElement.TypeName">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeElement.Interactions">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.Check">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GetPrevNodes">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GetSinkPads">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GetSrcPads">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GoToState(SharPipes.Pipes.Base.State)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GetPropertyValues">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GetSrcPad(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GetSinkPad(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.SetPropertyValue(SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.TransitionStoppedReady">
             <summary>
             Contains the logic that should run when changing from the Stopped to the Ready state.
            
             Usually initalization if external resources.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous state change.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.TransitionReadyPlaying">
             <summary>
             Contains the logic that should run when changing from the Ready to the Playing state.
            
             Usually preparing to receive data.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous state change.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.TransitionPlayingReady">
             <summary>
             Contains the logic that should run when changing from the Playing to the Ready state.
            
             Usually stopping data processing.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous state change.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.TransitionReadyStopped">
             <summary>
             Contains the logic that should run when changing from the Ready to the Stopped state.
            
             Usually freeing of external resources.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous state change.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElement.GetPropertyBindings">
            <summary>
            Gets a list of all Property bindings that should be serialized/deserialized.
            </summary>
            <returns>List of all the PropertyBindings of hte element.</returns>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeElementFactory">
             <summary>
             Create elements give a factoryType name.
            
             These names can either be registered using the <see cref="T:SharPipes.Pipes.Base.Attributes.ElementNameAttribute"/> or will be generated using the Classname.
             Classnames ending in Src, Sink, or Element will get these parts removed.
             </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElementFactory.GetFactoryTypes">
            <summary>
            Gets a list of all known factoryType names.
            </summary>
            <returns>All known factoryType names.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElementFactory.GetName(System.Type)">
             <summary>
             Gets the name for a given Type.
            
             These names can either be registered using the <see cref="T:SharPipes.Pipes.Base.Attributes.ElementNameAttribute"/> or will be generated using the Classname.
             Classnames ending in Src, Sink, or Element will get these parts removed.
             </summary>
             <param name="type">the type to resolve the name of.</param>
             <returns>The factoryType name of the given type.</returns>
             <exception cref="T:System.ArgumentNullException">if type is null.</exception>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeElementFactory.Make(System.String,System.String)">
            <summary>
            Creates a new element given a factoryType name and the name the element should get.
            </summary>
            <param name="factoryType">The type of element to create.</param>
            <param name="name">the name the element should receive.</param>
            <returns>The newly created element or Null if the name was not found.</returns>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeLine">
            <summary>
            A complete pipeline consisting of linked elements that transform data from one form to another.
            </summary>
        </member>
        <member name="E:SharPipes.Pipes.Base.PipeLine.ElementAdded">
            <summary>
            Occurs when an element gets added to the pipeline.
            </summary>
        </member>
        <member name="E:SharPipes.Pipes.Base.PipeLine.ElementRemoved">
            <summary>
            Occurs when an element gets removed to the pipeline.
            </summary>
        </member>
        <member name="E:SharPipes.Pipes.Base.PipeLine.ElementsLinked">
            <summary>
            Occurs when two element get linked.
            </summary>
        </member>
        <member name="E:SharPipes.Pipes.Base.PipeLine.ElementsUnlinked">
            <summary>
            Occurs when two element get unlinked.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.CreateNodeFromTemplate(SharPipes.Pipes.Base.IPipeElement)">
            <summary>
            Creates a new element from an existing template.
            Only the type gets copied.
            Properties need to be initialized manually.
            </summary>
            <param name="template">The template element.</param>
            <returns>A new element of the same type as the template.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.GetDefinition">
            <summary>
            Gets a description of the current pipeline including all off the pipelines elements, element properties and links.
            Used for serializing the pipeline.
            </summary>
            <returns>The pipelines desciption.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.FromDefinition(SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition)">
            <summary>
            Clears the pipeline and recreates itself using the given description.
            USed for deserializing the pipeline.
            </summary>
            <param name="definition">the pipelinee definition.</param>
            <returns>A list of errors that occured turing the builing of the pipeline.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.Add(SharPipes.Pipes.Base.IPipeElement)">
            <summary>
            Add an element to the pipeline to be handled.
            The pipeline handles the <see cref="T:SharPipes.Pipes.Base.State"/> of all it's elements and serielizes elements it owns when it gets serialized.
            </summary>
            <param name="element">The element to add to the pipeline.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.Remove(SharPipes.Pipes.Base.IPipeElement)">
            <summary>
            Removes an element from the pipeline.
            This unlinks the element from all other elements.
            Afterwars this element won't be handled by the pipleline.
            </summary>
            <param name="element">The element to remove from the pipeline.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.Connect``1(SharPipes.Pipes.Base.PipeSrcPad{``0},SharPipes.Pipes.Base.PipeSinkPad{``0})">
            <summary>
            Connect two element pads, letting them send data from the src to the sink.
            </summary>
            <typeparam name="TValue">The type of data that can be sent.</typeparam>
            <param name="src">The src ot the data.</param>
            <param name="sink">The destination of the data.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.TryConnect(SharPipes.Pipes.Base.IPipeSrcPad,SharPipes.Pipes.Base.IPipeSinkPad)">
            <summary>
            Tries to Connect two pads if you don't have strongly typed pads.
            </summary>
            <param name="src">The src pad sending data.</param>
            <param name="sink">The sink pad receiving the data.</param>
            <returns>True if the elements were linked. False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If either parameters were null.</exception>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.Start">
            <summary>
            Moves the pipeline and all it's elements to the <see cref="F:SharPipes.Pipes.Base.State.Playing"/> state.
            </summary>
            <returns>A task that represents the state change operation.</returns>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLine.Stop">
            <summary>
            Moves the pipeline and all it's elements to the <see cref="F:SharPipes.Pipes.Base.State.Stopped"/> state.
            </summary>
            <returns>A task that represents the state change operation.</returns>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeLineDefinitions.ElementDefinition">
            <summary>
            This class is the description of one element used for serializing and deserializing elements.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLineDefinitions.ElementDefinition.#ctor(System.String,System.String,System.Collections.Generic.IList{SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeLineDefinitions.ElementDefinition"/> class.
            </summary>
            <param name="typeFactory">The name used to recreate the element this object describes.</param>
            <param name="name">The name of the element.</param>
            <param name="properties">All the properties of the described element.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.ElementDefinition.TypeFactory">
            <summary>
            Gets the name used to recreate the element this object describes.
            </summary>
            <value>
            The name used to recreate the element this object describes.
            A new element of the same Type can be created using the <see cref="M:SharPipes.Pipes.Base.PipeElementFactory.Make(System.String,System.String)"/> method.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.ElementDefinition.Name">
            <summary>
            Gets the name of the element this object describes.
            </summary>
            <value>
            The name of the element this object describes.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.ElementDefinition.Properties">
            <summary>
            Gets all properties of the element this object describes.
            </summary>
            <value>
            All properties of the element this object describes.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition">
            <summary>
            Describes a link between two pads.
            Used for serialization / deserialization.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition"/> class.
            </summary>
            <param name="fromElement">The name of the element this link connects from.</param>
            <param name="fromPad">The name of the <see cref="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.FromElement"/> pad.</param>
            <param name="toElement">The name of the element this link connects to.</param>
            <param name="toPad">The name of the <see cref="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.ToElement"/> element pad.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.FromElement">
            <summary>
            Gets the name of the element this link connects from.
            </summary>
            <value>
            The name of the element this link connects from.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.FromPad">
            <summary>
            Gets the name of the <see cref="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.FromElement"/> pad.
            </summary>
            <value>
            The name of the <see cref="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.FromElement"/> pad.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.ToElement">
            <summary>
            Gets the name of the element this link connects to.
            </summary>
            <value>
            The name of the element this link connects to.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.ToPad">
            <summary>
            Gets the name of the <see cref="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.ToElement"/> element pad.
            </summary>
            <value>
            The name of the <see cref="P:SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition.ToElement"/> element pad.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition">
            <summary>
            Describes the structure of an entire <see cref="T:SharPipes.Pipes.Base.PipeLine"/>.
            Used for serialization/deserialization.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition"/> class.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition.#ctor(System.Collections.Generic.IList{SharPipes.Pipes.Base.PipeLineDefinitions.ElementDefinition},System.Collections.Generic.IList{SharPipes.Pipes.Base.PipeLineDefinitions.LinkDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition"/> class.
            </summary>
            <param name="elements">All element the described pipeline contains.</param>
            <param name="links">All links the described pipeline contains.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition.Elements">
            <summary>
            Gets all element the described pipeline contains.
            </summary>
            <value>
            All element the described pipeline contains.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.PipeLineDefinition.Links">
            <summary>
            Gets all links the described pipeline contains.
            </summary>
            <value>
            All links the described pipeline contains.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue">
            <summary>
            The value of an element property. used for serialization/deserialization.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue"/> class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue.Value">
            <summary>
            Gets the value of the property.
            </summary>
            <value>
            The value of the property.
            </value>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeSink">
            <summary>
            Baseclass for all elements that only have sink pads.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeSink"/> class.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSink.GetSinkPad``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSink.GetSrcPads">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSink.GetPropertyBindings">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeSinkPad`1">
             <summary>
             Base class for all SinkPads.
            
             Data always flows from <see cref="T:SharPipes.Pipes.Base.PipeSrcPad`1"/> to <see cref="T:SharPipes.Pipes.Base.PipeSinkPad`1"/>.
             </summary>
             <typeparam name="TValue">The typt of value this pad can accept.</typeparam>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSinkPad`1.#ctor(SharPipes.Pipes.Base.IPipeSink,System.String,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeSinkPad`1"/> class.
            </summary>
            <param name="parent">the element this pad is connected to.</param>
            <param name="name">the name of the pad.</param>
            <param name="elementCallback">the callback inside the element to push data to.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeSinkPad`1.Parent">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeSinkPad`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeSinkPad`1.Peer">
            <summary>
            Gets the pad on the other side of the link of null if the pad is not linked.
            </summary>
            <value>
            The pad on the other side of the link of null if the pad is not linked.
            </value>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeSinkPad`1.ElementCallback">
            <summary>
            Gets or sets the element callback.
            </summary>
            <value>
            The element callback.
            this callback is called each time a value is pushed from the connected edge.
            </value>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSinkPad`1.IsLinked">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSinkPad`1.Push(`0)">
            <summary>
            Pushed data along the pipeline.
            </summary>
            <param name="value">the value to push into the element.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSinkPad`1.Unlink">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSinkPad`1.Equals(SharPipes.Pipes.Base.IPipeSinkPad)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSinkPad`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeSrc">
            <summary>
            Baseclass for all elements that only have src pads.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrc.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeSrc"/> class.
            </summary>
            <param name="name">the name of the element.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrc.GetSinkPads">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrc.GetSrcPad``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrc.GetPropertyBindings">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeSrcPad`1">
             <summary>
             Base class for all SrcPads.
            
             Data always flows from <see cref="T:SharPipes.Pipes.Base.PipeSrcPad`1"/> to <see cref="T:SharPipes.Pipes.Base.PipeSinkPad`1"/>.
             </summary>
             <typeparam name="TValue">The typt of value this pad can push throu the pipeline.</typeparam>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrcPad`1.#ctor(SharPipes.Pipes.Base.IPipeSrc,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeSrcPad`1"/> class.
            </summary>
            <param name="parent">the element this pad is connected to.</param>
            <param name="name">the name of the pad.</param>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeSrcPad`1.Parent">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeSrcPad`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:SharPipes.Pipes.Base.PipeSrcPad`1.Peer">
            <summary>
            Gets the pad on the other side of the link of null if the pad is not linked.
            </summary>
            <value>
            The pad on the other side of the link of null if the pad is not linked.
            </value>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrcPad`1.IsLinked">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrcPad`1.Push(`0)">
            <summary>
            Pushed data along the pipeline.
            </summary>
            <param name="value">the value to push into towards the connected <see cref="T:SharPipes.Pipes.Base.PipeSinkPad`1"/>.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrcPad`1.Unlink">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrcPad`1.Equals(SharPipes.Pipes.Base.IPipeSrcPad)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeSrcPad`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.PipeTransform">
            <summary>
            Base class for elemnts that have both sink and src pads.
            </summary>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeTransform.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PipeTransform"/> class.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeTransform.GetSinkPad``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PipeTransform.GetSrcPad``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.Properties.strings">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.Properties.strings.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.Properties.strings.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.Properties.strings.InvalidSetValueExpression">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid SetValue Expression. ähnelt.
            </summary>
        </member>
        <member name="P:SharPipes.Pipes.Base.Properties.strings.LambdaMustReturnAProperty">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Lambda must return a property. ähnelt.
            </summary>
        </member>
        <member name="T:SharPipes.Pipes.Base.PropertyBinding`1">
            <summary>
            Describes how to set/get a certain properties value.
            </summary>
            <typeparam name="TValue">The Type of the underlying property.</typeparam>
        </member>
        <member name="M:SharPipes.Pipes.Base.PropertyBinding`1.#ctor(System.String,System.Action{`0},System.Func{`0},System.Func{System.Object,Optional.Option{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PropertyBinding`1"/> class.
            </summary>
            <param name="name">than name of the property.</param>
            <param name="setValue">How to set the properties value.</param>
            <param name="getValue">How to get teh properties value.</param>
            <param name="convert">a Custom conversion logic if no generic cast can be determined.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PropertyBinding`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SharPipes.Pipes.Base.PropertyBinding`1"/> class.
            </summary>
            <param name="property">An expression thast is used to automatically create a nes proprety binding.</param>
        </member>
        <member name="M:SharPipes.Pipes.Base.PropertyBinding`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SharPipes.Pipes.Base.PropertyBinding`1.TrySetValue(SharPipes.Pipes.Base.PipeLineDefinitions.PropertyValue)">
            <inheritdoc/>
        </member>
        <member name="T:SharPipes.Pipes.Base.State">
            <summary>
            State of the Pipeline or Element.
            Pretty Similar to the GStreamer State.
            </summary>
        </member>
        <member name="F:SharPipes.Pipes.Base.State.Playing">
            <summary>
            Playlist/Element is playing.
            Data is getting pushed throu it.
            </summary>
        </member>
        <member name="F:SharPipes.Pipes.Base.State.Ready">
            <summary>
            Playlist/Element is ready.
            All Elements have finished their initalization.
            But no data is flowing yet.
            </summary>
        </member>
        <member name="F:SharPipes.Pipes.Base.State.Stopped">
            <summary>
            Playlist/Element is stopped.
            No data is flowing
            Elements may not be initialized yet or may have releases their resources.
            </summary>
        </member>
    </members>
</doc>
